# api_uwsgi.ini file
[uwsgi]

# project directory
# set this as needed
chdir = /fsd/main/api

# Django's wsgi file
module = config.wsgi

# uWSGI communicates with nginx through this port
socket = 0.0.0.0:49152

# Virtual environment settings
# daemonize=/fsd/logs/uwsgi/fsd_api.log

# Handling Static Files - (avoiding serving direclty from nginx for full containerizaiton)
static-map = /static=/fsd/main/api/static
static-expires = /* 7776000
offload-threads = %k


# recommended settings from: https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
strict = true
master = true
enable-threads = true
vacuum = true                          ; Delete sockets during shutdown
single-interpreter = true
die-on-term = true                     ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true

max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

cheaper-algo = busyness              
processes = 500                      ; Maximum number of workers allowed
cheaper = 4                          ; Minimum number of workers allowed
cheaper-initial = 16                 ; Workers created at startup
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 16                    ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergegency workers to create if there are too many requests in the queue

harakiri = 60                        ; Forcefully kill workers after 60 seconds
